<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-12</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>


part1=part_type_create();
part1_sys = part_system_create();
part_system_depth(part1_sys, 0);
part_type_shape(part1, pt_shape_square);
part_type_scale(part1, 0.05,0.1);
part_type_size(part1, 1, 1, -0.1, 0);
part_type_speed(part1, 0.1, 0.5, 0, 0);
part1_emit = part_emitter_create(part1_sys);
part_system_depth(part1_sys, 0);
//part_type_life(part1, 5, 5*2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spd = 5;
right = keyboard_check(vk_right);
left = keyboard_check(vk_left);
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);

hspd = spd*(right-left);
vspd = spd*(down-up);

if instance_exists(Player_Object){
x = Player_Object.x
y = Player_Object.y



//partice

if (hspd &gt; 0){
if (Player_Object.count &gt;= 3){

part_type_color2(part1, c_red, c_white)
part_type_alpha2(part1, 1, 0.5);

part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);


}
if (Player_Object.count = 2){

part_type_color2(part1, c_orange, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 1){

part_type_color2(part1, c_yellow, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count &lt; 1){

part_type_color2(part1, c_green, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}
}

if (hspd &lt; 0){
if (Player_Object.count &gt;= 3){

part_type_color2(part1, c_red, c_white)
part_type_alpha2(part1, 1, 0.5);

part_emitter_region(part1_sys, part1_emit, x , x + (hspd), y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 2){

part_type_color2(part1, c_orange, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 1){

part_type_color2(part1, c_yellow, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count &lt; 1){

part_type_color2(part1, c_green, c_white)
part_type_alpha2(part1, 1, 0.5);

part_emitter_region(part1_sys, part1_emit, x , x + (hspd), y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);


}
}

if (vspd &gt; 0){
if (Player_Object.count &gt;= 3){

part_type_color2(part1, c_red, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x -5, x + 5, y- vspd, y, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 2){

part_type_color2(part1, c_orange, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 1){

part_type_color2(part1, c_yellow, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count &lt; 1){

part_type_color2(part1, c_green, c_white)
part_type_alpha2(part1, 1, 0.5);

part_emitter_region(part1_sys, part1_emit, x -5, x + 5, y- vspd, y, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}
}

if (vspd &lt; 0){
if (Player_Object.count &gt;= 3){

part_type_color2(part1, c_red, c_white)
part_type_alpha2(part1, 1, 0.5);

part_emitter_region(part1_sys, part1_emit, x -5, x + 5, y, y + vspd, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 2){

part_type_color2(part1, c_orange, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count = 1){

part_type_color2(part1, c_yellow, c_white)
part_type_alpha2(part1, 1, 0.5);


part_emitter_region(part1_sys, part1_emit, x - (hspd), x , y-5, y+5, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}

if (Player_Object.count &lt; 1){

part_type_color2(part1, c_green, c_white)
part_type_alpha2(part1, 1, 0.5);
part_type_speed(part1, 0.1, 0.5, 0, 0);

part_emitter_region(part1_sys, part1_emit, x -5, x + 5, y, y + vspd, ps_shape_rectangle, ps_distr_gaussian);
part_emitter_stream(part1_sys, part1_emit, part1, 1);

}
}

}
else{
part_particles_clear(part1);
part_system_destroy(part1_sys);
part_emitter_destroy(part1_sys, part1_emit);
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
