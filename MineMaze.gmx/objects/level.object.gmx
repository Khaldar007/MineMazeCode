<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///trying
//resize

room_width = (Cell_Width/16)*720;
room_height = (Cell_Height/16)*720;

//set grid width and height
var width = room_width div Cell_Width;
var height = room_height div Cell_Height;

//create grid
grid = ds_grid_create(width, height);

//fill the grid with the void
//ds_grid_set_region(grid, 0,0, width -1, height -1, Floor);

//randomising the world
randomize();

//create the controller in the center of the grid
var cx = width div 2;
var cy = height div 2;

//create the player
instance_create(cx*Cell_Width+Cell_Width/2, cy*Cell_Height+Cell_Height/2, Player_Object);

//Give the controller a random direction
var cdir= irandom(3);
var bchance = irandom(3);
var wallchance = irandom(6);

var ExitXchance = irandom_range(-16, 16);
var ExitYchance = irandom_range(-16, 16);
var choosex = irandom(1);
var choosey = irandom(1);
// the odds variable for changing direction
var odds = 1;

cx = 0;
cy = 0;
//create the level using 1000 steps
repeat (2025){

//place a floor tile at the controller position

//grid[# cx, cy] = Floor;

//randomize the direction of the controller

    if (cx &lt;= 45) and (cy &lt;= 45){
    cx = cx + 1;

    grid[# cx, cy] = Floor;
    

    
    }          
    if (cx = 45){
    cy = cy + 1;
    cx = 0
    
    }
    }

yy=0




//place the exit
if (choosex = 0){
            xchance = irandom_range(0, 14) ;

            }
if (choosex = 1){
            xchance = irandom_range(30, 44) ;

            }
if (choosey = 0){
            ychance = irandom_range(0,14);

            }
if (choosey = 1){
            ychance = irandom_range(30, 44) ;

            }

       
instance_create(xchance*(1*Cell_Width), ychance*(1*Cell_Height), Exit_Object);

grid[# xchance, ychance] = Exit;
grid[# xchance + 1, ychance] = Floor;
grid[# xchance - 1, ychance] = Floor;
grid[# xchance, ychance + 1] = Floor;
grid[# xchance, ychance - 1] = Floor;
grid[# 22, 22] = Start;
grid[# 21, 22] = Start;
grid[# 23, 22] = Start;
grid[# 22, 21] = Start;
grid[# 22, 23] = Start;

//draw the level
tile_add(background5, 0, 0, Cell_Width, Cell_Height, xchance*Cell_Width, ychance*Cell_Height, 0);
;
for (var yy=0; yy &lt; height; yy++){
    for (var xx = 0; xx &lt; width; xx++){
    wallchance = irandom(5)
        if(grid[# xx, yy] == Floor){ 
        
        if (wallchance = 0){
        instance_create(xx*Cell_Width, yy*Cell_Height, wall_object) 
        }
        if (wallchance = 1){
        //tile_add(background0, 0, 0, Cell_Width, Cell_Height, xx*Cell_Width, yy*Cell_Height, 0)
        }
        if (wallchance = 2){
        //tile_add(background0, 0, 0, Cell_Width, Cell_Height, xx*Cell_Width, yy*Cell_Height, 0)
        }
        if (wallchance = 3){
        instance_create(xx*Cell_Width, yy*Cell_Height, bombwall) 
        }
        if (wallchance = 4){
        //tile_add(background0, 0, 0, Cell_Width, Cell_Height, xx*Cell_Width, yy*Cell_Height, 0)
        }
        if (wallchance = 5){
        instance_create(xx*Cell_Width, yy*Cell_Height, wall_object) 
        }                       
           }
         
      
      
        
    }
}
//tile_add(background0, 0, 0, Cell_Width, Cell_Height, 22*Cell_Width, 22*Cell_Height, 0)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restart the room
room_restart();


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
