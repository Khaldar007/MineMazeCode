<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>playeridle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get input and move

var spd = 5;
right = keyboard_check(vk_right);
left = keyboard_check(vk_left);
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);

hspd = spd*(right-left);
vspd = spd*(down-up);
game_over = false;
//collision
if(place_meeting(x + hspd, y, wall_object)){
    var wall = instance_place(x + hspd, y, wall_object)

    while(!place_meeting(x + sign(hspd), y, wall_object)){
        x += sign(hspd);
        }
        
        
        with (wall){
        instance_destroy()
        }
        //hspd= 0
        global.points = global.points + 1
}

if(place_meeting(x, y + vspd, wall_object)){
    var wall = instance_place(x , y + vspd, wall_object)

    while(!place_meeting(x , y+ sign(vspd), wall_object)){
        y += sign(vspd);
        }
        
        with (wall){
        instance_destroy()}
        global.points = global.points + 1      
        //vspd= 0
}

if(place_meeting(x + hspd, y, bombwall)){
    while(!place_meeting(x + sign(hspd), y, bombwall)){
        x += sign(hspd);
        }
        instance_create(0,0, obj_End);      
        game_over = true;

}

if(place_meeting(x, y + vspd, bombwall)){
    while(!place_meeting(x , y+ sign(vspd), bombwall)){
        y += sign(vspd);
        }
        instance_create(0,0, obj_End);
        game_over = true;

}

if(place_meeting(x, y + vspd, Exit_Object)){
    while(!place_meeting(x , y+ sign(vspd), Exit_Object)){
        y += sign(vspd);
        }
        instance_create(0,0, obj_Win);


}

if(place_meeting(x + hspd, y, Exit_Object)){
    while(!place_meeting(x + sign(hspd), y, Exit_Object)){
        x += sign(hspd);
        }
        instance_create(0,0, obj_Win);      


}


//instance_create(x, y, trail)
x += hspd;
y += vspd;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_ext(Arrow,-1, Player_Object.x, Player_Object.y,0.5,0.5, point_direction(Player_Object.x , Player_Object.y , (Exit_Object.x), (Exit_Object.y)),c_white ,1);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var spd = 3;
right = keyboard_check(vk_right);
left = keyboard_check(vk_left);
up = keyboard_check(vk_up);
down = keyboard_check(vk_down);
restart = false;
hspd = spd*(right-left);
vspd = spd*(down-up);

//Count bombs nearby
count = 0
if (place_meeting(x + (0.75*Cell_Height), y, bombwall)) or (place_meeting(x + (0.5*Cell_Height), y, bombwall)) or (place_meeting(x + (0.9*Cell_Height), y, bombwall)){
count += 1
}

if (place_meeting(x - (0.75*Cell_Height), y, bombwall))or (place_meeting(x - (0.9*Cell_Height), y, bombwall)) or (place_meeting(x - (0.5*Cell_Height), y, bombwall)){
count += 1
}

if (place_meeting(x , y + (0.75*Cell_Width), bombwall)) or (place_meeting(x , y + (0.5*Cell_Width), bombwall)) or (place_meeting(x , y + (0.9*Cell_Width), bombwall)){
count += 1
}

if (place_meeting(x , y - (0.75*Cell_Width), bombwall)) or (place_meeting(x , y - (0.5*Cell_Width), bombwall)) or (place_meeting(x , y - (0.9*Cell_Width), bombwall)){
count += 1
}


if (count = 0){

//draw_sprite(playergreentrail,1,x - hspd,y - vspd);
//draw_sprite_ext(playergreentrail, 1, x - (7*hspd),y - (7*vspd), 0.5, 0.5, 45, c_white, 0.5);
//draw_sprite_ext(playergreentrail, 1, x - (5*hspd),y - (5*vspd), 0.7, 0.7, 0, c_white, 0.7);
//draw_sprite_ext(playergreentrail, 1, x - (2.8*hspd),y - (2.8*vspd), 0.9, 0.9, 0, c_white, 0.9);
draw_sprite(playerlowrisk,1,x,y);

}
if (count = 1){

//draw_sprite_ext(playermedtrail, 1, x - (7*hspd),y - (7*vspd), 0.5, 0.5, 45, c_white, 0.5);
//draw_sprite_ext(playermedtrail, 1, x - (5*hspd),y - (5*vspd), 0.7, 0.7, 0, c_white, 0.7);
//draw_sprite_ext(playermedtrail, 1, x - (2.8*hspd),y - (2.8*vspd), 0.9, 0.9, 0, c_white, 0.9);
draw_sprite(playersmallrisk,1,x,y);

}

if (count = 2){

//draw_sprite_ext(playermedtrail, 1, x - (7*hspd),y - (7*vspd), 0.5, 0.5, 45, c_white, 0.5);
//draw_sprite_ext(playermedtrail, 1, x - (5*hspd),y - (5*vspd), 0.7, 0.7, 0, c_white, 0.7);
//draw_sprite_ext(playermedtrail, 1, x - (2.8*hspd),y - (2.8*vspd), 0.9, 0.9, 0, c_white, 0.9);
draw_sprite(playermedrisk,1,x,y);

}
if (count &gt;= 3){

//draw_sprite_ext(playerhighrisk, 1, x - (7*hspd),y - (7*vspd), 0.5, 0.5, 45, c_white, 0.5);
//draw_sprite_ext(playerhighrisk, 1, x - (5*hspd),y - (5*vspd), 0.7, 0.7, 0, c_white, 0.7);
//draw_sprite_ext(playerhighrisk, 1, x - (2.8*hspd),y - (2.8*vspd), 0.9, 0.9, 0, c_white, 0.9);
draw_sprite(highbombrisk,1,x,y);


}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// get input and move

//sprite_index = player;
var spd = 5;
var hspd = (keyboard_check(vk_right) - keyboard_check(vk_left))*spd;
var vspd = (keyboard_check(vk_down) -keyboard_check(vk_up))*spd;

//move
move(hspd, vspd);

    sprite_index = PlayerAttack;


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
